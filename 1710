LeetCode question number 1710 
Problem Name :  Maximum Units on a Truck
Difficulty : Easy
Acceptance rate : 73.7%

Problem Statement : You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:
numberOfBoxesi is the number of boxes of type i.
numberOfUnitsPerBoxi is the number of units in each box of the type i.
You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.

Return the maximum total number of units that can be put on the truck.

// Example :
Example 1:

Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.
Example 2:

Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91
 
// Constraints :
1 <= boxTypes.length <= 1000
1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000
1 <= truckSize <= 106


Code :

class Solution {
public:
    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        //[[5,10],[2,5],[4,7],[3,9]] = boxTypes, truckSize = 10
        priority_queue<pair<int,int>> pq;

        int count = 0;
       // Using priority_queue default sorting by first parameter
        for(vector<int> x : boxTypes)
        {
            pq.push({x[1],x[0]});
        }
        int units = 0;
        while(!pq.empty() && count<truckSize)
        {
            if(count+pq.top().second<truckSize)
            {
                count+=pq.top().second;//increasing the size of count by the number of boxes
                units+=pq.top().second * pq.top().first;
                pq.pop(); // so that we can't keep collecting the element again and again
            }
            else
            {
                int quantity = truckSize - count;
                count+=quantity;
                units+=quantity*pq.top().first;
                pq.pop();
            }

        }
        
      return units;
          
        
    }
};

// Runtime : 37 ms
// Memory : 18.39 MB


